#include<iostream>
#include<ctype.h>
#define N 100
using namespace std;
char Stack[N];
int top=-1;
void push(char *stack,int x)
{
top++;
stack[top]=x;
cout<<x<<"is pushed into stack"<<endl;
}
char pop(char *stack)
{
char dataout;
dataout=stack[top];
top--;
return dataout;
}
char stackTop(char *stack)
{
char stacktoken;
stacktoken=stack[top];
return stacktoken;
}
int priority(char c)
{
		if(c=='^')
	{
		return 3;
	}
	else if(c=='*'||c=='/')
	{
		return 2;
	}
	else if(c=='+'||c=='-')
	{
		return 1;
	}
	else if(c=='(')
	{
		return 0;
	}
	else
	{
		return -1;
	}
}
void infixToPostfix(string s)
{
	string postfix;
for(int i=0;i<s.length();i++)
	{
			if(s[i]=='(')
		{
			push(Stack,s[i]);
		}
		else if(s[i]==')')
		{
			char d;
			d=pop(Stack);
			while(d!='(')
			{
				postfix+=d;
				d=pop(Stack);
			}
		}
		else if(s[i]=='*'||s[i]=='/'||s[i]=='+'||s[i]=='-')
		{
			char d;
			d=stackTop(Stack);
			while(top!=-1 && priority(s[i])<priority(d))
			{
				d=pop(Stack);
				postfix+=d;
			}
			push(Stack,s[i]);
		}
		else if((isdigit(s[i]) || isalpha(s[i])) )
		{
			postfix+=s[i];
		}
		else
		cout<<"Invalid postfix expression"<<endl;
	}
while(top!=-1)
	{
		char d;
		d=pop(Stack);
		postfix+=d;
	}
    cout<<"The postfix expression is :"<<endl;
	cout<<postfix;
}
int main()
{

	string exp;
	cout<<"enter the infix expression: ";
	cin>>exp;
	infixToPostfix(exp);
	
	return 0;
}
